import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Comparator;
import javax.swing.*;
import java.util.Arrays;

/**
 * MainForm Class
 * Builds form and handles all event generated by users
 */

public class MainForm extends JFrame implements ActionListener {

    SpringLayout layout = new SpringLayout();
    JLabel lblTitle,lblIdea,lblImageFile,lblWebLink,lblPMaterials,lblCHints,lblSugList,lblFind;
    JTextField txtIdea,txtImageFile,txtWebLink,txtFind,txtFilter;
    JTextArea txtPMaterials,txtCHints,txtSugList;
    JButton btnFind,btnNew,btnSave,btnDel,btnFirst,btnLast,btnNext,btnPrevious,btnExit,btnSortIdea,btnSearchBinary,btnFilter;
    int currentEntry = 0; //Holds current item
    FileManager file = new FileManager(); //Implement File manager class

    Ideas[] ideaArray;//set up array
    public int ideaArraySize;//retrieve array length for use in this class
    boolean isCancel = false; //Boolean variable for exit/cancel button
    boolean isSavedToFile = true; //Boolean variable to remember if changes are saved to file

    /**
     * MainForm Constructor
     * @throws Exception Handles Window closing event
     */
    public MainForm() throws Exception
    {
        setSize(500, 600);
        setLocation(400, 200);
        this.getContentPane().setBackground(Color.decode("#e0fcff"));
        setTitle("The Repurpose App");
        setLayout(this.layout);
        setResizable(false);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                ClosingTasks();
                }
        });
        BuildForm();
        ideaArray = file.ReadDataFromFile();
        if((ideaArraySize = file.getArrayLength()) == 0)
        {
            JOptionPane.showMessageDialog(this,"Error Loading File.\nPlease Close Application and Reopen.");
        }
        DisplayCurrentEntry();
        setVisible(true);
        SetSuggestionList();
    }
    /**
     * Method to Build the form
     */
    private void BuildForm()
    {

        //Left Side Of Screen

        //Build title using UIBuilder
        //North-West Anchor
        lblTitle = UIBuilderLibrary.BuildJLabelWithNorthWestAnchor("Re-Purposing Suggestions",20,20,layout,this);
        add(lblTitle);
        lblTitle.setFont(new Font("Arial", Font.BOLD,20));
        //lblTitle.setForeground(Color.BLUE);

        //Build labels using UIBuilder
        lblIdea = UIBuilderLibrary.BuildJLabelInlineBelow("Idea Title:",5,layout,lblTitle);
        add(lblIdea);
        lblImageFile = UIBuilderLibrary.BuildJLabelInlineBelow("Image File:",8,layout,lblIdea);
        add(lblImageFile);
        lblWebLink = UIBuilderLibrary.BuildJLabelInlineBelow("Web Link:",8,layout,lblImageFile);
        add(lblWebLink);
        lblPMaterials = UIBuilderLibrary.BuildJLabelInlineBelow("Primary Materials:",8,layout,lblWebLink);
        add(lblPMaterials);

        //Build text boxes using UIBuilder
        txtIdea = UIBuilderLibrary.BuildJTextFieldInlineToRight(15,70,layout,lblIdea);
        add(txtIdea);
        txtImageFile = UIBuilderLibrary.BuildJTextFieldInlineBelow(15,4,layout,txtIdea);
        add(txtImageFile);
        txtWebLink = UIBuilderLibrary.BuildJTextFieldInlineBelow(15,4,layout,txtImageFile);
        add(txtWebLink);

        //Build Text Areas
        txtPMaterials = new JTextArea();
        txtPMaterials.setLineWrap(true);
        txtPMaterials.setWrapStyleWord(true);
        JScrollPane scrollPM = new JScrollPane(this.txtPMaterials);
        scrollPM.setPreferredSize(new Dimension(170,70));
        scrollPM.setVerticalScrollBarPolicy(20);
        layout.putConstraint("West",scrollPM,0,"West",txtWebLink);
        layout.putConstraint("North",scrollPM,4,"South",txtWebLink);
        add(scrollPM);

        txtCHints = new JTextArea();
        txtCHints.setLineWrap(true);
        txtCHints.setWrapStyleWord(true);
        JScrollPane scrollCH = new JScrollPane(txtCHints);
        scrollCH.setPreferredSize(new Dimension(170,70));
        scrollCH.setVerticalScrollBarPolicy(20);
        layout.putConstraint("West",scrollCH,0,"West",scrollPM);
        layout.putConstraint("North",scrollCH,4,"South",scrollPM);
        add(scrollCH);

        //Build Construction Hints
        lblCHints = new JLabel();
        lblCHints.setText("Construction Hints:");
        layout.putConstraint("West",lblCHints,0,"West",lblPMaterials);
        layout.putConstraint("North",lblCHints,0,"North",scrollCH);
        add(lblCHints);

        //Right Side Of Screen

        //North-West Anchor
        //Build Find label, box and button using UIBuilder
        lblFind = UIBuilderLibrary.BuildJLabelWithNorthWestAnchor("Find:",335,20,layout,this);
        add(lblFind);
        txtFind = UIBuilderLibrary.BuildJTextFieldInlineToRight(8,3,layout,lblFind);
        add(txtFind);
        txtFind.setText("By Idea Title");
        btnFind = UIBuilderLibrary.BuildJButtonInlineBelow(120,25,"Find",8,this,layout,lblFind);
        add(btnFind);

        //Build Utility Buttons using UIBuilder
        btnNew = UIBuilderLibrary.BuildJButtonInlineBelow(120,25,"New",25,this,layout,btnFind);
        add(btnNew);
        btnSave = UIBuilderLibrary.BuildJButtonInlineBelow(120,25,"Save",4,this,layout,btnNew);
        add(btnSave);
        btnDel = UIBuilderLibrary.BuildJButtonInlineBelow(120,25,"Delete",4,this,layout,btnSave);
        add(btnDel);

        //Build Navigation Buttons using UIBuilder
        btnFirst = UIBuilderLibrary.BuildJButtonInlineBelow(30,25,"|<",4,this,layout,btnDel);
        add(btnFirst);
        btnFirst.setMargin(new Insets(0,0,0,0));
        btnPrevious = UIBuilderLibrary.BuildJButtonInlineToRight(30,25,"<",0,this,layout,btnFirst);
        add(btnPrevious);
        btnPrevious.setMargin(new Insets(0,0,0,0));
        btnNext = UIBuilderLibrary.BuildJButtonInlineToRight(30,25,">",0,this,layout,btnPrevious);
        add(btnNext);
        btnNext.setMargin(new Insets(0,0,0,0));
        btnLast = UIBuilderLibrary.BuildJButtonInlineToRight(30,25,">|",0,this,layout,btnNext);
        add(btnLast);
        btnLast.setMargin(new Insets(0,0,0,0));

        btnExit = UIBuilderLibrary.BuildJButtonInlineBelow(120,25,"Exit",25,this,layout,btnFirst);
        add(btnExit);

        //Build Bottom Of Screen

        //North-West Anchor
        //Buttons from left to right using UIBuilder
        btnSortIdea = UIBuilderLibrary.BuildJButtonWithNorthWestAnchor(120,25,"Sort By Idea Title",20,280,this,layout,this);
        add(btnSortIdea);
        btnSortIdea.setMargin(new Insets(0,0,0,0));
        btnSearchBinary = UIBuilderLibrary.BuildJButtonInlineToRight(170,25,"Binary Search by Idea Title",2,this,layout,btnSortIdea);
        add(btnSearchBinary);
        btnSearchBinary.setMargin(new Insets(0,0,0,0));
        btnFilter = UIBuilderLibrary.BuildJButtonInlineToRight(70,25,"Filter By:",2,this,layout,btnSearchBinary);
        add(btnFilter);
        btnFilter.setMargin(new Insets(0,0,0,0));
        txtFilter = UIBuilderLibrary.BuildJTextFieldInlineToRight(6,2,layout,btnFilter);
        txtFilter.setText("By Material");
        add(txtFilter);

        //Suggestion Label and list
        lblSugList = UIBuilderLibrary.BuildJLabelInlineBelow("Re-Purposing Suggestions List:",8,layout,btnSortIdea);
        add(lblSugList);
        txtSugList = new JTextArea();
        txtSugList.setLineWrap(true);
        txtSugList.setWrapStyleWord(true);
        txtSugList.setEditable(false);
        txtSugList.setFont(new Font("Ariel",Font.PLAIN,18));
        txtSugList.setBackground(Color.decode("#bfd8db"));
        JScrollPane scrollSL = new JScrollPane(this.txtSugList);
        scrollSL.setPreferredSize(new Dimension(440,200));
        scrollSL.setVerticalScrollBarPolicy(20);
        layout.putConstraint("West",scrollSL,0,"West",lblSugList);
        layout.putConstraint("North",scrollSL,4,"South",lblSugList);
        add(scrollSL);
    }
    /**
     * Method to display items on screen
     */
    private void DisplayCurrentEntry()
    {
        //if list is empty make text fields blank
        if(ideaArraySize<=0)
        {
            //disable delete button if there is nothing to delete
            btnDel.setEnabled(false);
            txtIdea.setText("");
            txtImageFile.setText("");
            txtWebLink.setText("");
            txtPMaterials.setText("");
            txtCHints.setText("");
            txtSugList.setText("");
            ideaArraySize = 0;
            NewState();
        }
        //otherwise set text fields to current positions attributes
        else
        {
            //enable delete button if there are things to delete
            btnDel.setEnabled(true);
            txtIdea.setText(ideaArray[currentEntry].Idea);
            txtImageFile.setText(ideaArray[currentEntry].ImageFile);
            txtWebLink.setText(ideaArray[currentEntry].WebLink);
            txtPMaterials.setText(ideaArray[currentEntry].Materials);
            txtCHints.setText(ideaArray[currentEntry].Hints);
        }
    }

    /**
     * Method for saving entry to list
     */
    private void SaveEntryToList()
    {
        //entry at list position = text box text.
        ideaArray[currentEntry].Idea = txtIdea.getText();
        ideaArray[currentEntry].ImageFile = txtImageFile.getText();
        ideaArray[currentEntry].WebLink = txtWebLink.getText();
        ideaArray[currentEntry].Materials = txtPMaterials.getText();
        ideaArray[currentEntry].Hints = txtCHints.getText();
        //Give them positive result
        txtSugList.setText("Current Entry Updated!");
        //remember that we need to save to file
        isSavedToFile = false;
    }

    /**
     * Method for deleting an entry
     */
    private void DeleteEntryToList()
    {
        if(ideaArraySize==0)return;
        //bring up confirmation pane asking if user is sure
        int a = JOptionPane.showConfirmDialog(this,"Are you sure you want to delete?","Confirmation",JOptionPane.YES_NO_OPTION);
        //if yes delete, set view back to first in list
        if(a!=JOptionPane.YES_OPTION)return;
        for (int i = currentEntry; i < ideaArraySize; i++)
        {
            if(i==ideaArraySize-1)
            {
                ideaArray[i]=null;
                break;
            }
            ideaArray[i] = ideaArray[i+1];
        }
        ideaArraySize--;
        if(currentEntry==ideaArraySize)
        {
            currentEntry=ideaArraySize-1;
        }
        DisplayCurrentEntry();
    }

    /**
     * Method to check form
     * @return True = not filled correctly || False = filled correctly
     */
    private boolean isNotFilled()
    {
        //if text area is empty or blank show error box then reposition cursor on that box
        if(txtIdea.getText().isEmpty()||txtIdea.getText().isBlank()){
            JOptionPane.showMessageDialog(this,"Idea Text is Empty");
            txtIdea.grabFocus();
            //return not filled in
            return true;
        }
        if(txtImageFile.getText().isEmpty()||txtImageFile.getText().isBlank()){
            JOptionPane.showMessageDialog(this,"Image File Text is Empty");
            txtImageFile.grabFocus();
            return true;
        }
        if(txtWebLink.getText().isEmpty()||txtWebLink.getText().isBlank()){
            JOptionPane.showMessageDialog(this,"Web Link Text is Empty");
            txtWebLink.grabFocus();
            return true;
        }
        if(txtPMaterials.getText().isEmpty()||txtPMaterials.getText().isBlank()){
             JOptionPane.showMessageDialog(this,"Materials Text is Empty");
             txtPMaterials.grabFocus();
            return true;
        }
        if(txtCHints.getText().isEmpty()||txtCHints.getText().isBlank()){
            JOptionPane.showMessageDialog(this,"Hints Text is Empty");
            txtCHints.grabFocus();
            return true;
        }
        //return filled in
        return false;
    }

    /**
     * Method to set "new state" for a new entry to be added
     */
    private void NewState()
    {
        //add blank entry and show it
        ideaArray[ideaArraySize] = new Ideas();
        ideaArraySize++;
        currentEntry = ideaArraySize-1;
        DisplayCurrentEntry();
        //turn exit button into cancel button
        btnExit.setText("Cancel");
        isCancel= true;
        //turn off all irrelevant buttons
        setButtonState(false);
        //set focus to idea title
        txtIdea.grabFocus();
    }

    /**
     * Method for tasks to complete before exiting
     */
    private void ClosingTasks()
    {
        //if saved to file don't ask for save
        if(isSavedToFile) System.exit(0);
        //otherwise option pane to ask for save
        int a = JOptionPane.showConfirmDialog(this, "Current Data not saved!\nDo you want to save to file before you exit?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION);
        //if yes call save function
        if (a == JOptionPane.YES_OPTION) {
            file.WriteDataToFile(ideaArray, ideaArraySize);
            System.exit(0);
        }
        //if no exit program
        else if (a == JOptionPane.NO_OPTION) {
            System.exit(0);
        }
        //if cancel do nothing
    }

    /**
     * Turns buttons off when adding new entry, or back on after
     * @param b True = Enables Buttons || False = Disables Buttons
     */
    private void setButtonState(boolean b)
    {
        btnLast.setEnabled(b);
        btnNext.setEnabled(b);
        btnPrevious.setEnabled(b);
        btnFirst.setEnabled(b);
        btnDel.setEnabled(b);
        btnFilter.setEnabled(b);
        btnFind.setEnabled(b);
        btnNew.setEnabled(b);
        btnSearchBinary.setEnabled(b);
        btnSortIdea.setEnabled(b);
        txtFilter.setEnabled(b);
        txtFind.setEnabled(b);
        lblFind.setEnabled(b);
    }

    /**
     * Shows ideas in list at the bottom
     */
    private void SetSuggestionList()
    {
        //Create String builder to put all values of objects into
        StringBuilder temp = new StringBuilder();
        for (int i = 0; i < ideaArraySize; i++) {
            temp.append((i + 1)).append(". ").append(ideaArray[i].Idea).append("\n");
        }
        //Set text to the fully built string
        txtSugList.setText(String.valueOf(temp));
    }

    /**
     * Method to sort main array
     */
    private void SortByIdea()
    {
        //Compare by Idea titles
        Arrays.sort(ideaArray,0,ideaArraySize,Comparator.comparing(Ideas::getIdea));
        //Show in bottom text field
        SetSuggestionList();
        //set back to first entry
        currentEntry = 0;
        DisplayCurrentEntry();
    }
    @Override
    public void actionPerformed(ActionEvent e)
    {
        //navigation buttons
        if( e.getSource() == btnFirst)
        {
            currentEntry = 0;
            DisplayCurrentEntry();
        }
        if( e.getSource() == btnPrevious)
        {
            if(currentEntry != 0)
            {
                currentEntry --;
                DisplayCurrentEntry();
            }
        }
        if( e.getSource() == btnNext)
        {
            if(currentEntry != ideaArraySize-1)
            {
                currentEntry ++;
                DisplayCurrentEntry();
            }
        }
        if( e.getSource() == btnLast)
        {
            currentEntry = ideaArraySize-1;
            DisplayCurrentEntry();
        }
        //save button
        if(e.getSource()==btnSave)
        {
            //check form validity before saving
            if(isNotFilled())return;
            SaveEntryToList();
            //return buttons to functioning
            setButtonState(true);
        }
        //delete button
        if(e.getSource()==btnDel)
        {
            //calls delete function
            DeleteEntryToList();
        }
        //new button
        if(e.getSource()==btnNew)
        {
            NewState();
        }
        //exit or cancel button
        if(e.getSource()==btnExit)
        {
            //Check if exit button is currently cancel button
            if(isCancel)
            {
                //revert button
                btnExit.setText("Exit");
                isCancel = false;
                //turn buttons back on
                setButtonState(true);
                //remove the blank entry just added and reset screen
                ideaArray[currentEntry] = null;
                ideaArraySize--;
                currentEntry = ideaArraySize-1;
                DisplayCurrentEntry();
            }else{
                //perform closing tasks if button is exit button
                ClosingTasks();
            }
        }
        //Find button
        if(e.getSource()==btnFind)
        {
            SetSuggestionList();
            //Check if matches text exactly
            for (int i = 0; i < ideaArraySize; i++)
            {
                if(txtFind.getText().replaceAll("\\s","").equalsIgnoreCase(ideaArray[i].Idea.replaceAll("\\s","")))
                {
                    //if successful display match on screen
                    currentEntry = i;
                    DisplayCurrentEntry();
                    txtSugList.setText("Found Item: \""+txtFind.getText()+"\".\n\n"+ideaArray[i].toString());
                    return;
                }
            }
            //Check for first match of part of text
            for (int i = 0; i < ideaArraySize; i++) {
                if(ideaArray[i].Idea.toLowerCase().contains(txtFind.getText().toLowerCase()))
                {
                    //if successful display match on screen
                    currentEntry = i;
                    DisplayCurrentEntry();
                    txtSugList.setText("Found Item Containing: \""+txtFind.getText()+"\".\n\n"+ideaArray[i].toString());
                    return;
                }
            }
            //Shows error on a failed attempt
            txtSugList.setText("Cannot Find \""+txtFind.getText()+"\".");
            txtFind.grabFocus();
            txtFind.selectAll();
        }
        //Sort Button
        if(e.getSource()==btnSortIdea)
        {
            SortByIdea();
        }
        //Binary Search Button
        if(e.getSource()==btnSearchBinary)
        {
            SortByIdea();
            //Temp array to store strings
            String[] tempArray = new String[ideaArraySize];
            for (int i = 0; i < tempArray.length; i++)
            {
                //set each position in temp array to the value of idea from main array
                tempArray[i] = ideaArray[i].Idea.toLowerCase();
            }
            //binary search the temp array and set current position if found
            currentEntry = Arrays.binarySearch(tempArray, txtFind.getText().toLowerCase());
            if(currentEntry>=0)
            {
                //wrapped in try catch because if value not found will throw error when
                //trying to show negative position in array
                DisplayCurrentEntry();
                txtSugList.setText("Found Item: \""+txtFind.getText()+"\".\n\n"+ideaArray[currentEntry].toString());
            }
            else
            {
                //if error thrown means binary search failed - tell user and set entry and view to default.
                txtSugList.setText("\""+txtFind.getText()+"\"... Not Found!");
                currentEntry = 0;
                DisplayCurrentEntry();
                txtFind.grabFocus();
                txtFind.selectAll();
            }
        }
        //Filter by Button
        if(e.getSource()==btnFilter)
        {
            //check if field is empty or blank
            if(txtFilter.getText().isEmpty()||txtFilter.getText().isBlank())
            {
                txtSugList.setText("Nothing entered...");
                txtFilter.grabFocus();
                return;
            }
            // temporary string builder
            StringBuilder temp = new StringBuilder();
            for (int i = 0; i < ideaArraySize; i++)
            {
                if(ideaArray[i].Materials.contains(txtFilter.getText()))
                {
                    //cycle through each item if it has the search term add it onto string builder
                    temp.append("Item No.").append(i + 1).append(". ").append(ideaArray[i].Idea).append(" contains \"").append(txtFilter.getText()).append("\"\n");
                }
            }
            if(!temp.isEmpty()) {
                //show each item we found that contained search term.
                txtSugList.setText(String.valueOf(temp));
            }else{
                //if string builder is empty we didn't find anything - tell user
                txtSugList.setText("Nothing contains \""+txtFilter.getText()+"\".");
                txtFilter.grabFocus();
                txtFilter.selectAll();
            }
        }
    }
}
